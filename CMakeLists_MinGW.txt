cmake_minimum_required(VERSION 3.14 FATAL_ERROR)

set(Yolo_mark_MAJOR_VERSION 1)
set(Yolo_mark_MINOR_VERSION 0)
set(Yolo_mark_PATCH_VERSION 0)
set(Yolo_mark_VERSION ${Yolo_mark_MAJOR_VERSION}.${Yolo_mark_MINOR_VERSION}.${Yolo_mark_PATCH_VERSION})

project(Yolo_mark VERSION ${Yolo_mark_VERSION})
enable_language(CXX)
set(BUILD_SHARED_LIBS FALSE)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_LIBRARIES "-static-libgcc -static-libstdc++ -lwsock32 -lws2_32 ${CMAKE_CXX_STANDARD_LIBRARIES}")

set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive")

set(BUILD_EXAMPLES OFF CACHE BOOL "opencv build examples" FORCE)
set(BUILD_TESTS OFF CACHE BOOL "opencv build examples" FORCE)
set(BUILD_DOCS OFF CACHE BOOL "opencv build examples" FORCE)
set(BUILD_PERF_TESTS OFF CACHE BOOL "opencv build examples" FORCE)
set(BUILD_opencv_apps OFF CACHE BOOL "opencv build examples" FORCE)
set(WITH_IPP OFF CACHE BOOL "opencv build examples" FORCE)
set(OpenCV_DIR ${CMAKE_CURRENT_SOURCE_DIR}/opencv-build/)
find_package(OpenCV REQUIRED)

if(TARGET opencv_world)
  list(APPEND OpenCV_LINKED_COMPONENTS "opencv_world")
else()
  if(TARGET opencv_video)
    list(APPEND OpenCV_LINKED_COMPONENTS "opencv_video")
  endif()
  if(TARGET opencv_videoio)
    list(APPEND OpenCV_LINKED_COMPONENTS "opencv_videoio")
  endif()
  if(TARGET opencv_highgui)
    list(APPEND OpenCV_LINKED_COMPONENTS "opencv_highgui")
  endif()
  if(TARGET opencv_imgproc)
    list(APPEND OpenCV_LINKED_COMPONENTS "opencv_imgproc")
  endif()
  if(TARGET opencv_imgcodecs)
    list(APPEND OpenCV_LINKED_COMPONENTS "opencv_imgcodecs")
  endif()
  if(TARGET opencv_core)
    list(APPEND OpenCV_LINKED_COMPONENTS "opencv_core")
  endif()
endif()

set(Yolo_mark_SOURCES "${CMAKE_CURRENT_LIST_DIR}/src/main.cpp")

add_executable(yolo_mark ${Yolo_mark_SOURCES})
message(${Yolo_mark_SOURCES})
#target_link_libraries(yolo_mark ${OpenCV_LINKED_COMPONENTS})
target_link_directories(yolo_mark PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/opencv-build/x64/mingw/staticlib)
target_link_libraries(yolo_mark opencv_world) 
target_include_directories(yolo_mark PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/opencv-build/include)
install(TARGETS yolo_mark DESTINATION "${INSTALL_BIN_DIR}")
